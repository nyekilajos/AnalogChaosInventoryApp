<?xml version="1.0" encoding="utf-8"?>
<ruleset name="Hermes Rules"
         xmlns="http://pmd.sf.net/ruleset/1.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"
         xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">
  <description>
    Hermes complementary PMD ruleset, with rules complementing the standard CheckStyle rules
    PMD rules for which there is a CheckStyle rule are excluded from this ruleset
  </description>
  <rule name="ReturnFromFinallyBlock" message="Avoid returning from a finally block" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="http://pmd.sourceforge.net/rules/basic.html#ReturnFromFinallyBlock" language="java">
    <description>
      Avoid returning from a finally block - this can discard exceptions.
    </description>
    <properties>
      <property name="xpath">
        <value>
          <![CDATA[
            //FinallyStatement//ReturnStatement
          ]]>
        </value>
      </property>
    </properties>
    <priority>3</priority>
    <example>
      <![CDATA[
        public class Bar {
         public String foo() {
          try {
           throw new Exception( "My Exception" );
          } catch (Exception e) {
           throw e;
          } finally {
           return "A. O. K."; // Very bad.
          }
         }
        }
      ]]>
    </example>
  </rule>
  <rule name="EmptySynchronizedBlock" message="Avoid empty synchronized blocks" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="http://pmd.sourceforge.net/rules/basic.html#EmptySynchronizedBlock" language="java">
    <description>
      Avoid empty synchronized blocks - they're useless.
    </description>
    <properties>
      <property name="xpath">
        <value>
          <![CDATA[
            //SynchronizedStatement/Block[1][count(*) = 0]
          ]]>
        </value>
      </property>
    </properties>
    <priority>1</priority>
    <example>
      <![CDATA[
        public class Foo {
         public void bar() {
          synchronized (this) {
           // empty!
          }
         }
        }
      ]]>
    </example>
  </rule>
  <rule name="UnnecessaryReturn" message="Avoid unnecessary return statements" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="http://pmd.sourceforge.net/rules/basic.html#UnnecessaryReturn" language="java">
    <description>
      Avoid unnecessary return statements
    </description>
    <properties>
      <property name="xpath">
        <value>
           <![CDATA[
          //ReturnStatement
           [parent::Statement
            [parent::BlockStatement
             [parent::Block
              [parent::MethodDeclaration/ResultType[@Void='true']
              ]
             ]
            ]
           ]
          ]]>
        </value>
      </property>
    </properties>
    <priority>1</priority>
    <example>
      <![CDATA[
        public class Foo {
         public void bar() {
          int x = 42;
          return;
         }
        }
      ]]>
    </example>
  </rule>
  <rule name="UnconditionalIfStatement" message="Do not use 'if' statements that are always true or always false" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="http://pmd.sourceforge.net/rules/basic.html#UnconditionalIfStatement" language="java">
    <description>
      Do not use "if" statements that are always true or always false.
    </description>
    <properties>
      <property name="xpath">
        <value>
          <![CDATA[
            //IfStatement/Expression
             [count(PrimaryExpression)=1]
             /PrimaryExpression/PrimaryPrefix/Literal/BooleanLiteral
          ]]>
        </value>
      </property>
    </properties>
    <priority>1</priority>
    <example>
      <![CDATA[
        public class Foo {
         public void close() {
          if (true) {
               // ...
           }
         }
        }
      ]]>
    </example>
  </rule>
  <rule name="CollapsibleIfStatements" message="These nested if statements could be combined" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="http://pmd.sourceforge.net/rules/basic.html#CollapsibleIfStatements" language="java">
    <description>
      Sometimes two 'if' statements can be consolidated by separating their conditions with a boolean short-circuit operator.
    </description>
    <properties>
      <property name="xpath">
        <value>
          <![CDATA[
            //IfStatement[@Else='false']/Statement
             /IfStatement[@Else='false']
             |
            //IfStatement[@Else='false']/Statement
             /Block[count(BlockStatement)=1]/BlockStatement
              /Statement/IfStatement[@Else='false']
          ]]>
        </value>
      </property>
    </properties>
    <priority>3</priority>
    <example>
      <![CDATA[
        public class Foo {
         void bar() {
          if (x) {
           if (y) {
            // do stuff
           }
          }
         }
        }
      ]]>
    </example>
  </rule>
  <rule name="ClassCastExceptionWithToArray" message="This usage of the Collection.toArray() method will throw a ClassCastException." class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="http://pmd.sourceforge.net/rules/basic.html#ClassCastExceptionWithToArray" language="java">
    <description>
      if you need to get an array of a class from your Collection,
      you should pass an array of the desidered class
      as the parameter of the toArray method. Otherwise you will get a
      ClassCastException.
    </description>
    <properties>
      <property name="xpath">
        <value>
          <![CDATA[
            //CastExpression[Type/ReferenceType/ClassOrInterfaceType[@Image !=
            "Object"]]//PrimaryExpression
            [
             PrimaryPrefix/Name[ends-with(@Image, '.toArray')]
             and
             PrimarySuffix/Arguments[count(*) = 0]
            ]
          ]]>
        </value>
      </property>
    </properties>
    <priority>1</priority>
    <example>
      <![CDATA[
        import java.util.ArrayList;
        import java.util.Collection;

        public class Test {

            public static void main(String[] args) {
                Collection c=new ArrayList();
                Integer obj=new Integer(1);
                c.add(obj);

                // this would trigger the rule (and throw a ClassCastException
        if executed)
                Integer[] a=(Integer [])c.toArray();

                // this wouldn't trigger the rule
                Integer[] b=(Integer [])c.toArray(new Integer[c.size()]);
            }
        }
      ]]>
    </example>
  </rule>
  <rule name="AvoidDecimalLiteralsInBigDecimalConstructor" message="Avoid creating BigDecimal with a decimal (float/double) literal. Use a String literal" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="http://pmd.sourceforge.net/rules/basic.html#AvoidDecimalLiteralsInBigDecimalConstructor" language="java">
    <description>
      One might assume that "new BigDecimal(.1)" is exactly equal
      to .1, but it is actually equal
      to .1000000000000000055511151231257827021181583404541015625.
      This is so because .1 cannot be represented exactly as a double
      (or, for that matter, as a binary fraction of any finite length).
      Thus, the long value that is being passed in to the constructor
      is not exactly equal to .1, appearances notwithstanding.

      The (String) constructor, on the other hand, is perfectly predictable:
      'new BigDecimal(".1")' is exactly equal to .1, as one
      would expect.  Therefore, it is generally recommended that the (String)
      constructor be used in preference to this one.
    </description>
    <properties>
      <property name="xpath">
        <value>
          <![CDATA[
            //VariableInitializer/Expression
            /PrimaryExpression/PrimaryPrefix
            /AllocationExpression[ClassOrInterfaceType[@Image="BigDecimal"]
            and
            ./Arguments/ArgumentList
            /Expression/PrimaryExpression/PrimaryPrefix/Literal[(not (ends-with
            (@Image,'"'))) and contains(@Image,".")]]
          ]]>
        </value>
      </property>
    </properties>
    <priority>1</priority>
    <example>
      <![CDATA[
        import java.math.BigDecimal;
        public class Test {

            public static void main(String[] args) {
              // this would trigger the rule
             BigDecimal bd=new BigDecimal(1.123);
              // this wouldn't trigger the rule
             BigDecimal bd=new BigDecimal("1.123");
              // this wouldn't trigger the rule
             BigDecimal bd=new BigDecimal(12);
            }
        }
      ]]>
    </example>
  </rule>
  <rule name="UselessOperationOnImmutable" message="An operation on an Immutable object (BigDecimal or BigInteger) won''t change the object itself" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="http://pmd.sourceforge.net/rules/basic.html#UselessOperationOnImmutable" language="java">
    <description>
      An operation on an Immutable object (BigDecimal or BigInteger) won't change the object itself. The
      result of the operation is a new object. Therefore, ignoring the operation result is an error.
    </description>
    <properties>
      <property name="xpath">
        <value>
          <![CDATA[
            //Statement//StatementExpression
            [PrimaryExpression/PrimaryPrefix/Name
            [
            starts-with(@Image,concat(ancestor::MethodDeclaration//LocalVariableDeclaration
            [./Type//ClassOrInterfaceType[@Image = 'BigInteger' or
            @Image = 'BigDecimal']]/VariableDeclarator/VariableDeclaratorId/@Image,"."))
            and
            (
            ends-with(@Image,".add")
            or
            ends-with(@Image,".multiply")
            or
            ends-with(@Image,".divide")
            or
            ends-with(@Image,".subtract")
            or
            ends-with(@Image,".setScale")
            or
            ends-with(@Image,".negate")
            or
            ends-with(@Image,".movePointLeft")
            or
            ends-with(@Image,".movePointRight")
            or
            ends-with(@Image,".pow")
            or
            ends-with(@Image,".shiftLeft")
            or
            ends-with(@Image,".shiftRight")
            )
            ]
            ]
          ]]>
        </value>
      </property>
    </properties>
    <priority>1</priority>
    <example>
      <![CDATA[
        import java.math.*;
        class Test {
         void method1() {
          BigDecimal bd=new BigDecimal(10);
          bd.add(new BigDecimal(5)); // this will trigger the rule
         }
         void method2() {
          BigDecimal bd=new BigDecimal(10);
          bd = bd.add(new BigDecimal(5)); // this won't trigger the rule
         }
        }
      ]]>
    </example>
  </rule>
  <rule name="MisplacedNullCheck" message="The null check here is misplaced; if the variable is null there'll be a NullPointerException" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="http://pmd.sourceforge.net/rules/basic.html#MisplacedNullCheck" language="java">
    <description>
      The null check here is misplaced. if the variable is null you'll get a NullPointerException.
      Either the check is useless (the variable will never  be "null") or it's incorrect.
    </description>
    <properties>
      <property name="xpath">
        <value>
          <![CDATA[
            //Expression/ConditionalAndExpression
             /descendant::PrimaryExpression/PrimaryPrefix
              /Name[starts-with(@Image,
              concat(ancestor::PrimaryExpression/following-sibling::EqualityExpression
               [@Image="!=" and ./PrimaryExpression/PrimaryPrefix/Literal/NullLiteral]
             /PrimaryExpression/PrimaryPrefix
              /Name[count(../../PrimarySuffix)=0]/@Image,"."))
            ]
          ]]>
        </value>
      </property>
    </properties>
    <priority>1</priority>
    <example>
      <![CDATA[
        public class Foo {
         public void bar() {
          if (a.equals("hi") && a != null) {
           // do something
          }
         }
        }
      ]]>
    </example>
  </rule>
  <rule name="UnusedNullCheckInEquals" message="Invoke equals() on the object you''ve already ensured is not null" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="http://pmd.sourceforge.net/rules/basic.html#UnusedNullCheckInEquals" language="java">
    <description>
      After checking an object reference for null, you should invoke equals() on that object rather than passing it to another object's equals() method.
    </description>
    <properties>
      <property name="xpath">
        <value>
          <![CDATA[
            //PrimarySuffix[@Image='equals' and not(../PrimaryPrefix/Literal)]
             /../PrimarySuffix/Arguments/ArgumentList/Expression
             /PrimaryExpression/PrimaryPrefix
             /Name[@Image = ./../../../../../../../../../../Expression/ConditionalAndExpression
             /EqualityExpression[@Image="!=" and count(./preceding-sibling::*)=0 and
             ./PrimaryExpression/PrimaryPrefix/Literal/NullLiteral]
              /PrimaryExpression/PrimaryPrefix/Name/@Image]
          ]]>
        </value>
      </property>
    </properties>
    <priority>1</priority>
    <example>
      <![CDATA[
        public class Test {

        public String method1() { return "ok";}
        public String method2() { return null;}

        public void method(String a) {
        String b;
        /*
        I don't know it method1() can be "null"
        but I know "a" is not null..
        I'd better write a.equals(method1())
        */
        if (a!=null && method1().equals(a)) { // will
        trigger the rule
        //whatever
        }

        if (method1().equals(a) && a != null) { //
        won't trigger the rule
        //whatever
        }

        if (a!=null && method1().equals(b)) { // won't
        trigger the rule
        //whatever
        }

        if (a!=null && "LITERAL".equals(a)) { // won't
        trigger the rule
        //whatever
        }

        if (a!=null && !a.equals("go")) { // won't
        trigger the rule
        a=method2();
        if (method1().equals(a)) {
        //whatever
        }
        }
        }
        }
      ]]>
    </example>
  </rule>
  <rule name="AvoidThreadGroup" message="Avoid using ThreadGroup; it is not thread safe" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="http://pmd.sourceforge.net/rules/basic.html#AvoidThreadGroup" language="java">
    <description>
      Avoid using ThreadGroup; although it is intended to be used in a threaded environment
      it contains methods that are not thread safe.
    </description>
    <properties>
      <property name="xpath">
        <value>
          <![CDATA[
            //AllocationExpression/ClassOrInterfaceType[contains(@Image,'ThreadGroup')] |
            //PrimarySuffix[contains(@Image, 'getThreadGroup')]
          ]]>
        </value>
      </property>
    </properties>
    <priority>3</priority>
    <example>
      <![CDATA[
        public class Bar {
         void buz() {
          ThreadGroup tg = new ThreadGroup("My threadgroup") ;
          tg = new ThreadGroup(tg, "my thread group");
          tg = Thread.currentThread().getThreadGroup();
          tg = System.getSecurityManager().getThreadGroup();
         }
        }
      ]]>
    </example>
  </rule>
  <rule name="OptimizableToArrayCall" message="This call to Collection.toArray() may be optimizable" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="http://pmd.sourceforge.net/rules/design.html#OptimizableToArrayCall" language="java">
    <description>
      A call to Collection.toArray can use the Collection's size vs an empty Array of the desired type.
    </description>
    <properties>
      <property name="xpath">
        <value>
          <![CDATA[
            //PrimaryExpression
            [PrimaryPrefix/Name[ends-with(@Image, 'toArray')]]
            [
            PrimarySuffix/Arguments/ArgumentList/Expression
             /PrimaryExpression/PrimaryPrefix/AllocationExpression
             /ArrayDimsAndInits/Expression/PrimaryExpression/PrimaryPrefix/Literal[@Image='0']
            ]
          ]]>
        </value>
      </property>
    </properties>
    <priority>2</priority>
    <example>
      <![CDATA[
        class Foo {
         void bar(Collection x) {
           // A bit inefficient
           x.toArray(new Foo[0]);
           // Much better; this one sizes the destination array, avoiding
           // a reflection call in some Collection implementations
           x.toArray(new Foo[x.size()]);
         }
        }
      ]]>
    </example>
  </rule>
  <rule name="BadComparison" message="Avoid equality comparisons with Double.NaN" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="http://pmd.sourceforge.net/rules/design.html#BadComparison" language="java">
    <description>
      Avoid equality comparisons with Double.NaN - these are
      likely to be logic errors.
    </description>
    <properties>
      <property name="xpath">
        <value>
          <![CDATA[
            //EqualityExpression[@Image='==']
             /PrimaryExpression/PrimaryPrefix
             /Name[@Image='Double.NaN' or @Image='Float.NaN']
          ]]>
        </value>
      </property>
    </properties>
    <priority>1</priority>
    <example>
      <![CDATA[
        public class Bar {
         boolean x = (y == Double.NaN);
        }
      ]]>
    </example>
  </rule>
  <rule name="InstantiationToGetClass" message="Avoid instantiating an object just to call getClass() on it; use the .class public member instead" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="http://pmd.sourceforge.net/rules/design.html#InstantiationToGetClass" language="java">
    <description>
      Avoid instantiating an object just to call getClass() on it; use the .class public member instead
    </description>
    <example>
      <![CDATA[
        public class Foo {
         // Replace this
         Class c = new String().getClass();
         // with this:
         Class c = String.class;
        }
      ]]>
    </example>
    <priority>1</priority>
    <properties>
      <property name="xpath">
        <value>
          <![CDATA[
            //PrimarySuffix
             [@Image='getClass']
             [parent::PrimaryExpression
              [PrimaryPrefix/AllocationExpression]
              [count(PrimarySuffix) = 2]
             ]
          ]]>
        </value>
      </property>
    </properties>
  </rule>
  <rule name="IdempotentOperations" message="Avoid idempotent operations (like assigning a variable to itself)" class="net.sourceforge.pmd.lang.java.rule.design.IdempotentOperationsRule" externalInfoUrl="http://pmd.sourceforge.net/rules/design.html#IdempotentOperations" language="java">
    <description>
      Avoid idempotent operations - they are silly.
    </description>
    <priority>1</priority>
    <example>
      <![CDATA[
        public class Foo {
         public void bar() {
          int x = 2;
          x = x;
         }
        }
      ]]>
    </example>
  </rule>
  <rule name="MissingStaticMethodInNonInstantiatableClass" message="Class cannot be instantiated and does not provide any static methods or fields" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="http://pmd.sourceforge.net/rules/design.html#MissingStaticMethodInNonInstantiatableClass" language="java">
    <description>
      A class that has private constructors and does not have any static methods or fields cannot be used.
    </description>
    <properties>
      <property name="xpath">
        <value>
          <![CDATA[
            //ClassOrInterfaceDeclaration[@Nested='false'][
            ( count(./ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/ConstructorDeclaration)>0
              and count(./ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/ConstructorDeclaration) = count(./ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/ConstructorDeclaration[@Private='true']) )
            and
            count(.//MethodDeclaration[@Static='true'])=0
            and
            count(.//FieldDeclaration[@Public='true'][@Static='true'])=0
            ]
          ]]>
        </value>
      </property>
    </properties>
    <priority>1</priority>
    <example>
      <![CDATA[
        /* This class is unusable, since it cannot be
         instantiated (private constructor),
         and no static method can be called.
         */
        public class Foo {
         private Foo() {}
         void foo() {}
        }
      ]]>
    </example>
  </rule>
  <rule name="SimplifyConditional" message="No need to check for null before an instanceof" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="http://pmd.sourceforge.net/rules/design.html#SimplifyConditional" language="java">
    <description>
      No need to check for null before an instanceof; the instanceof keyword returns false when given a null argument.
    </description>
    <properties>
      <property name="xpath">
        <value>
          <![CDATA[
            //Expression
             [ConditionalOrExpression
             [EqualityExpression[@Image='==']
              //NullLiteral
              and
              UnaryExpressionNotPlusMinus
               [@Image='!']//InstanceOfExpression[PrimaryExpression
                 //Name/@Image = ancestor::ConditionalOrExpression/EqualityExpression
                  //PrimaryPrefix/Name/@Image]]
            or
            ConditionalAndExpression
             [EqualityExpression[@Image='!=']//NullLiteral
             and
            InstanceOfExpression
             [PrimaryExpression[count(PrimarySuffix[@ArrayDereference='true'])=0]
              //Name/@Image = ancestor::ConditionalAndExpression
               /EqualityExpression//PrimaryPrefix/Name/@Image]]]
          ]]>
        </value>
      </property>
    </properties>
    <priority>2</priority>
    <example>
      <![CDATA[
        class Foo {
         void bar(Object x) {
          if (x != null && x instanceof Bar) {
           // just drop the "x != null" check
          }
         }
        }
      ]]>
     </example>
  </rule>
  <rule name="CompareObjectsWithEquals" message="Use equals() to compare object references." class="net.sourceforge.pmd.lang.java.rule.design.CompareObjectsWithEqualsRule" externalInfoUrl="http://pmd.sourceforge.net/rules/design.html#CompareObjectsWithEquals" language="java">
    <description>
      Use equals() to compare object references; avoid comparing them with ==.
    </description>
    <priority>2</priority>
    <example>
      <![CDATA[
        class Foo {
         boolean bar(String a, String b) {
          return a == b;
         }
        }
      ]]>
    </example>
  </rule>
  <rule name="UnsynchronizedStaticDateFormatter" message="Static DateFormatter objects should be accessed in a synchronized manner" class="net.sourceforge.pmd.lang.java.rule.design.UnsynchronizedStaticDateFormatterRule" language="java">
    <description>
      SimpleDateFormat is not synchronized. Sun recomends separate format instances
      for each thread. If multiple threads must access a static formatter, the
      formatter must be synchronized either on method or block level.
    </description>
    <properties></properties>
    <priority>1</priority>
    <example>
      <![CDATA[
        public class Foo {
            private static final SimpleDateFormat sdf = new SimpleDateFormat();
            void bar() {
                sdf.format(); // bad
            }
            synchronized void foo() {
                sdf.format(); // good
            }
        }
      ]]>
    </example>
  </rule>
  <rule name="UseArraysAsList" message="Use asList instead of tight loops" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="http://pmd.sourceforge.net/rules/optimizations.html#UseArraysAsList" language="java">
    <description>
     The java.util.Arrays class has a "asList" method that
     should be used when you want to create a new List from
     an array of objects. It is faster than executing a loop to
     copy all the elements of the array one by one
     </description>
    <priority>2</priority>
    <properties>
      <property name="xpath">
        <value>
         <![CDATA[
          //Statement[
              (ForStatement) and (count(.//IfStatement)=0)
             ]
             //StatementExpression[
              PrimaryExpression/PrimaryPrefix/Name[
             substring-before(@Image,'.add') = ancestor::MethodDeclaration//LocalVariableDeclaration[
                ./Type//ClassOrInterfaceType[
                 @Image = 'Collection' or
                 @Image = 'List' or @Image='ArrayList'
                ]
               ]
               /VariableDeclarator/VariableDeclaratorId[
                count(..//AllocationExpression/ClassOrInterfaceType[
                 @Image="ArrayList"
                ]
                )=1
               ]/@Image
              ]
             and
             PrimaryExpression/PrimarySuffix/Arguments/ArgumentList/Expression/PrimaryExpression/PrimaryPrefix/Name
             [@Image = ancestor::MethodDeclaration//LocalVariableDeclaration
             [@Array="true"]/VariableDeclarator/VariableDeclaratorId/@Image]
             /../..[count(.//PrimarySuffix)
             =1]/PrimarySuffix/Expression/PrimaryExpression/PrimaryPrefix
             /Name
             ]
         ]]>
       </value>
      </property>
    </properties>
    <example>
       <![CDATA[
         public class Test {
          public void foo(Integer[] ints) {
          // could just use Arrays.asList(ints)
           List l= new ArrayList(10);
           for (int i=0; i< 100; i++) {
            l.add(ints[i]);
           }
           for (int i=0; i< 100; i++) {
            l.add(a[i].toString()); // won't trigger the rule
           }
          }
         }
       ]]>
     </example>
  </rule>
  <rule name="AvoidArrayLoops" message="System.arraycopy is more efficient" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="http://pmd.sourceforge.net/rules/optimizations.html#AvoidArrayLoops" language="java">
    <description>
      Instead of copying data between two arrays, use
      System.arraycopy method
    </description>
    <priority>2</priority>
    <properties>
      <property name="xpath">
        <value>
          <![CDATA[
            //Statement[(ForStatement or WhileStatement) and
            count(*//AssignmentOperator[@Image = '='])=1
            and
            */Statement
            [
            ./Block/BlockStatement/Statement/StatementExpression/PrimaryExpression
            /PrimaryPrefix/Name/../../PrimarySuffix/Expression
            [(PrimaryExpression or AdditiveExpression) and count
            (.//PrimaryPrefix/Name)=1]//PrimaryPrefix/Name/@Image
            and
            ./Block/BlockStatement/Statement/StatementExpression/Expression/PrimaryExpression
            /PrimaryPrefix/Name/../../PrimarySuffix[count
            (..//PrimarySuffix)=1]/Expression[(PrimaryExpression
            or AdditiveExpression) and count(.//PrimaryPrefix/Name)=1]
            //PrimaryPrefix/Name/@Image
            ]]
          ]]>
        </value>
      </property>
    </properties>
    <example>
      <![CDATA[
        public class Test {
            public void bar() {
                int[] a = new int[10];
                int[] b = new int[10];
                for (int i = 0; i < 10; i++) {
                    b[i] = a[i];
                }

                // this will trigger the rule
                for (int i = 0; i < 10; i++) {
                    b[i] = a[c[i]];
                }

            }
        }
      ]]>
    </example>
  </rule>
  <rule name="ExceptionAsFlowControl" message="Avoid using exceptions as flow control." class="net.sourceforge.pmd.lang.java.rule.strictexception.ExceptionAsFlowControlRule" externalInfoUrl="http://pmd.sourceforge.net/rules/strictexception.html#ExceptionAsFlowControl" language="java">
    <description>
      Using Exceptions as flow control leads to GOTOish code and obscures true exceptions when debugging.
    </description>
    <priority>4</priority>
    <example>
    <![CDATA[
      public class Foo {
       void bar() {
        try {
         try {
         } catch (Exception e) {
          throw new WrapperException(e);
          // this is essentially a GOTO to the WrapperException catch block
         }
        } catch (WrapperException e) {
         // do some more stuff
        }
       }
      }
    ]]>
    </example>
  </rule>
  <rule name="AvoidCatchingNPE" message="Avoid catching NullPointerException; consider removing the cause of the NPE." class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="http://pmd.sourceforge.net/rules/strictexception.html#AvoidCatchingNPE" language="java">
    <description>
      Code should never throw NPE under normal circumstances.  A catch block may hide the original error, causing other more subtle errors in its wake.
    </description>
    <priority>3</priority>
    <properties>
      <property name="xpath">
        <value>
          <![CDATA[
          //CatchStatement/FormalParameter/Type
           /ReferenceType/ClassOrInterfaceType[@Image='NullPointerException']
           ]]>
        </value>
      </property>
    </properties>
    <example>
      <![CDATA[
        public class Foo {
         void bar() {
          try {
           // do something
           }  catch (NullPointerException npe) {
          }
         }
        }
      ]]>
    </example>
  </rule>
  <rule name="UnusedPrivateField" message="Avoid unused private fields such as ''{0}''." class="net.sourceforge.pmd.lang.java.rule.unusedcode.UnusedPrivateFieldRule" externalInfoUrl="http://pmd.sourceforge.net/rules/unusedcode.html#UnusedPrivateField" language="java">
    <description>
      Detects when a private field is declared and/or assigned a value, but not used.
    </description>
    <priority>1</priority>
    <example>
      <![CDATA[
        public class Something {
          private static int FOO = 2; // Unused
          private int i = 5; // Unused
          private int j = 6;
          public int addOne() {
            return j++;
          }
        }
      ]]>
    </example>
  </rule>
  <rule name="UnusedLocalVariable" message="Avoid unused local variables such as ''{0}''." class="net.sourceforge.pmd.lang.java.rule.unusedcode.UnusedLocalVariableRule" externalInfoUrl="http://pmd.sourceforge.net/rules/unusedcode.html#UnusedLocalVariable" language="java">
    <description>
      Detects when a local variable is declared and/or assigned, but not used.
    </description>
    <priority>1</priority>
    <example>
      <![CDATA[
        public class Foo {
         public void doSomething() {
          int i = 5; // Unused
         }
        }
      ]]>
    </example>
  </rule>
  <rule name="CheckResultSet" class="net.sourceforge.pmd.lang.rule.XPathRule" message="Always check the return of one of the navigation method (next,previous,first,last) of a ResultSet." externalInfoUrl="http://pmd.sourceforge.net/rules/basic.html#CheckResultSet" language="java">
    <description>
      <![CDATA[
        Always check the return of one of the navigation method (next,previous,first,last) of a ResultSet. Indeed,
        if the value return is 'false', the developer should deal with it !
      ]]>
    </description>
    <priority>2</priority>
    <properties>
      <property name="xpath">
        <value>
          <![CDATA[
            //Type/ReferenceType/ClassOrInterfaceType[
                    (@Image = 'ResultSet')
                    and
                    (../../../descendant::Name[ends-with(@Image,'executeQuery')])
                    and
                    (
              (not (contains(
                                    (./ancestor::Block/descendant::WhileStatement/descendant::Name/attribute::Image),
                                    concat(../../../VariableDeclarator/VariableDeclaratorId/attribute::Image,'.next')
                )  ) )
              and ( not ( contains(
                                    (./ancestor::Block/descendant::IfStatement/descendant::Name/attribute::Image),
                                    concat(../../../VariableDeclarator/VariableDeclaratorId/attribute::Image,'.next')
                ) ) )
              and (not (contains(
                                    (./ancestor::Block/descendant::WhileStatement/descendant::Name/attribute::Image),
                                    concat(../../../VariableDeclarator/VariableDeclaratorId/attribute::Image,'.previous')
                )  ) )
              and ( not ( contains(
                                    (./ancestor::Block/descendant::IfStatement/descendant::Name/attribute::Image),
                                    concat(../../../VariableDeclarator/VariableDeclaratorId/attribute::Image,'.previous')
                ) ) )
              and ( not ( contains(
                                    (./ancestor::Block/descendant::IfStatement/descendant::Name/attribute::Image),
                                    concat(../../../VariableDeclarator/VariableDeclaratorId/attribute::Image,'.last')
                ) ) )
              and ( not ( contains(
                                    (./ancestor::Block/descendant::IfStatement/descendant::Name/attribute::Image),
                                    concat(../../../VariableDeclarator/VariableDeclaratorId/attribute::Image,'.first')
                ) ) )

                     )
            ]
          ]]>
        </value>
      </property>
    </properties>
    <example>
      <![CDATA[
        // This is NOT appropriate !
        Statement stat = conn.createStatement();
        ResultSet rst = stat.executeQuery("SELECT name FROM person");
        rst.next(); // what if it returns a 'false' ?
        String firstName = rst.getString(1);

        // This is appropriate...
        Statement stat = conn.createStatement();
        ResultSet rst = stat.executeQuery("SELECT name FROM person");
        if (rst.next())
        {
            String firstName = rst.getString(1);
        }
        else
        {
            // here you deal with the error ( at least log it)
        }
      ]]>
    </example>
  </rule>
  <rule name="BigIntegerInstantiation" message="Don't create instances of already existing BigInteger and BigDecimal (ZERO, ONE, TEN)" class="net.sourceforge.pmd.lang.java.rule.basic.BigIntegerInstantiationRule" externalInfoUrl="http://pmd.sourceforge.net/rules/basic.html#BigIntegerInstantiation" language="java">
    <description>
      Don't create instances of already existing BigInteger
      (BigInteger.ZERO, BigInteger.ONE) and for 1.5 on,
      BigInteger.TEN and BigDecimal (BigDecimal.ZERO,
      BigDecimal.ONE, BigDecimal.TEN)
    </description>
    <priority>3</priority>
    <example>
      <![CDATA[
        public class Test {

         public static void main(String[] args) {
           BigInteger bi=new BigInteger(1);
           BigInteger bi2=new BigInteger("0");
           BigInteger bi3=new BigInteger(0.0);
           BigInteger bi4;
           bi4=new BigInteger(0);
         }
        }
      ]]>
    </example>
  </rule>
  <rule name="BrokenNullCheck" message="Method call on object which may be null" class="net.sourceforge.pmd.lang.java.rule.basic.BrokenNullCheckRule" externalInfoUrl="http://pmd.sourceforge.net/rules/basic.html#BrokenNullCheck" language="java">
    <description>
      The null check is broken since it will throw a NullPointerException itself.
      It is likely that you used || instead of &amp;&amp; or vice versa.
    </description>
    <priority>1</priority>
    <example>
      <![CDATA[
        class Foo {
         String bar(String string) {
          // should be &&
          if (string!=null || !string.equals(""))
            return string;
          // should be ||
          if (string==null && string.equals(""))
            return string;
         }
        }
      ]]>
    </example>
  </rule>
  <rule name="UnnecessaryConstructor" since="1.0" message="Avoid unnecessary constructors - the compiler will generate these for you" class="net.sourceforge.pmd.lang.rule.XPathRule" externalInfoUrl="http://pmd.sourceforge.net/rules/controversial.html#UnnecessaryConstructor" language="java">
    <description>
      This rule detects when a constructor is not necessary; i.e., when there's only one constructor,
      it's public, has an empty body, and takes no arguments.
    </description>
    <priority>3</priority>
    <properties>
      <property name="xpath">
        <value>
          <![CDATA[
            //ClassOrInterfaceBody[count(ClassOrInterfaceBodyDeclaration/ConstructorDeclaration)=1]
            /ClassOrInterfaceBodyDeclaration/ConstructorDeclaration
            [@Public='true']
            [not(FormalParameters/*)]
            [not(BlockStatement)]
            [not(NameList)]
            [count(ExplicitConstructorInvocation/Arguments/ArgumentList/Expression)=0]
          ]]>
        </value>
      </property>
    </properties>
    <example>
      <![CDATA[
        public class Foo {
         public Foo() {}
        }
      ]]>
    </example>
  </rule>
  <rule name="ConsecutiveLiteralAppends" message="StringBuffer.append is called {0} consecutive times with literal Strings. Use a single append with a single String." class="net.sourceforge.pmd.lang.java.rule.strings.ConsecutiveLiteralAppendsRule" externalInfoUrl="http://pmd.sourceforge.net/rules/strings.html#ConsecutiveLiteralAppends" language="java">
    <description>
      Consecutively calling StringBuffer.append with String literals
    </description>
    <priority>4</priority>
    <properties>
      <property name="threshold" description="The report threshold" value="1" />
    </properties>
    <example>
      <![CDATA[
        public class Foo {
         private void bar() {
           StringBuffer buf = new StringBuffer();
           buf.append("Hello").append(" ").append("World"); //bad
           buf.append("Hello World");//good
         }
        }
      ]]>
    </example>
  </rule>
  <rule name="UnnecessaryCaseChange" message="Using equalsIgnoreCase() is cleaner than using toUpperCase/toLowerCase().equals()." class="net.sourceforge.pmd.lang.java.rule.strings.UnnecessaryCaseChangeRule" externalInfoUrl="http://pmd.sourceforge.net/rules/strings.html#UnnecessaryCaseChange" language="java">
    <description>
      Using equalsIgnoreCase() is faster than using toUpperCase/toLowerCase().equals()
    </description>
    <priority>2</priority>
    <example>
      <![CDATA[
        public class Foo {
          public boolean bar(String buz) {
            // should be buz.equalsIgnoreCase("baz")
            return buz.toUpperCase().equals("baz");
            // another unnecessary toUpperCase()
            // return buz.toUpperCase().equalsIgnoreCase("baz");
          }
        }
      ]]>
    </example>
  </rule>
</ruleset>
